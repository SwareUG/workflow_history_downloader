name: Build, tag and push docker image to ghcr.io

# Controls when the action will run. Triggers the workflow on push or pull request
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      package_name:
        required: true
        type: string
      project_path:
        required: true
        type: string
      depot_project_id:
        required: true
        type: string
      test_port:
        required: false
        default: '1341'
        type: string
      health_check:
        required: false
        default: false
        type: boolean
      # local tag is used to tag the image locally, you can find it in package.json
      local_tag:
        required: true
        type: string
      # supported tags: dev, stg, prod
      env_tag:
        required: false
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  reusable_docker:
    runs-on: ubuntu-latest
    timeout-minutes: 80
    environment: ${{ inputs.environment }}
    outputs:
      docker_image: ${{ steps.build-image.outputs.IMAGE }}
      docker_image_ee: ${{ steps.build-image.outputs.IMAGE_EE }}
    permissions:
      contents: read
      packages: write
      deployments: write
      id-token: write
    strategy:
      matrix:
        name: [ '${{ inputs.package_name }}-ee', '${{ inputs.package_name }}' ]
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-project
        with:
          slim: 'true'

      - name: Setup Depot
        uses: depot/setup-action@v1
        with:
          oidc: true

      - name: Build, tag, and push image to ghcr.io
        id: build-image
        if: ${{ inputs.env_tag == 'dev' || inputs.env_tag == 'stg' }}
        env:
          REGISTRY_OWNER: novuhq
          DOCKER_NAME: ${{ matrix.name }}
          LOCAL_TAG: ${{ inputs.local_tag }}
          IMAGE_TAG: ${{ github.sha }}
          ENV_TAG: ${{ inputs.env_tag }}
          PROJECT_PATH: ${{ inputs.project_path }}
          GH_ACTOR: ${{ github.actor }}
          GH_PASSWORD: ${{ secrets.GH_PACKAGES }}
          DEPOT_PROJECT_ID: ${{ inputs.depot_project_id }}
        run: |
          echo $GH_PASSWORD | docker login ghcr.io -u $GH_ACTOR --password-stdin
          cd $PROJECT_PATH && npm run docker:build:depot
          docker tag $LOCAL_TAG ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG
          docker tag $LOCAL_TAG ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$ENV_TAG
          docker push ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG
          docker push ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$ENV_TAG

      - name: Production build, tag, and push image to ghcr.io
        id: build-prod-image
        if: ${{ inputs.env_tag == 'prod' }}
        env:
          REGISTRY_OWNER: novuhq
          DOCKER_NAME: ${{ matrix.name }}
          LOCAL_TAG: ${{ inputs.local_tag }}
          IMAGE_TAG: ${{ github.sha }}
          ENV_TAG: ${{ inputs.env_tag }}
          PROJECT_PATH: ${{ inputs.project_path }}
          GH_ACTOR: ${{ github.actor }}
          GH_PASSWORD: ${{ secrets.GH_PACKAGES }}
          DEPOT_PROJECT_ID:  ${{ inputs.depot_project_id }}
        run: |
          echo $GH_PASSWORD | docker login ghcr.io -u $GH_ACTOR --password-stdin
          cd $PROJECT_PATH && npm run docker:build:depot
          docker tag $LOCAL_TAG ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG
          docker tag $LOCAL_TAG ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$ENV_TAG
          docker tag $LOCAL_TAG ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:latest
          docker push ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG
          docker push ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$ENV_TAG
          docker push ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:latest

      - name: Save image to output
        if: ${{ !contains(matrix.name,'-ee') }}
        env:
          REGISTRY_OWNER: novuhq
          DOCKER_NAME: ${{ matrix.name }}
          IMAGE_TAG: ${{ github.sha }}
          OUTPUT_NAME: ${{ contains(matrix.name,'-ee') && 'IMAGE_EE' || 'IMAGE' }}
        run: |
          echo "$OUTPUT_NAME=ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Health check test
        id: health-check
        if: ${{ inputs.health_check == 'true' && (steps.build-image.outcome == 'success' || steps.build-prod-image.outcome == 'success') }}
        env:
          REGISTRY_OWNER: novuhq
          DOCKER_NAME: ${{ matrix.name }}
          LOCAL_TAG: ${{ inputs.local_tag }}
          IMAGE_TAG: ${{ github.sha }}
          TEST_PORT: ${{ inputs.test_port }}
          GH_ACTOR: ${{ github.actor }}
          GH_PASSWORD: ${{ secrets.GH_PACKAGES }}
        run: |
          echo $GH_PASSWORD | docker login ghcr.io -u $GH_ACTOR --password-stdin

          docker run --network=host --name $LOCAL_TAG -dit --env NODE_ENV=test ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG
          docker run --network=host appropriate/curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:$TEST_PORT/v1/health-check | grep 'ok'
